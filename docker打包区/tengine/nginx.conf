#user  nobody;
worker_processes 4;
error_log  /dev/stderr crit;
#error_log  /dev/stderr error;

events {
 worker_connections 10240;
 use epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    ############
    log_format main      '{ "@timestamp": "$time_iso8601", '
                         '"remote_addr": "$remote_addr", '
                         '"bytes": "$body_bytes_sent", '
                         '"request_time": "$request_time", '
                         '"status": "$status", '
                         '"http_host": "$http_host", '
                         '"http_request": "$request_uri", '
                         '"method": "$request_method", '
                         '"protocol": "$server_protocol", '
                         '"http_range": "$http_range", '
                         '"referer": "$http_referer", '
                         '"user_agent":"$http_user_agent", '
                         '"x_forwarded_for": "$http_x_forwarded_for", '
                         '"upstream_addr": "$upstream_addr", '
                         '"upstream_response_time": "$upstream_response_time", '
                         '"upstream_status": "$upstream_status" }';

    access_log /dev/stdout main;	
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    ##proxy upsteam ###
    proxy_redirect off;
    proxy_set_header Connection "";
    proxy_set_header Host $http_host;
    proxy_set_header Client-ip $remote_addr;
    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_buffering on;
    proxy_connect_timeout 30;
    proxy_send_timeout 30;
    proxy_read_timeout 60;
    proxy_max_temp_file_size 0;
    proxy_http_version 1.1;
    proxy_buffer_size 32k;
    proxy_buffers 8 32k;
    proxy_busy_buffers_size 64k;
    ###############
    check_shm_size 30m;
    client_body_timeout 30;
    keepalive_timeout 30;
    client_max_body_size 0m;
    client_header_buffer_size 8k;
    large_client_header_buffers 4 32k;
    ##################
    lua_shared_dict prometheus_metrics 50M;
    lua_package_path "/usr/local/nginx/conf/prometheus.lua";
    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    log_by_lua '
      metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    ';
    ###################
    server {
      listen 80 default backlog=10240;
      server_name  localhost;

      location /metrics {
        content_by_lua '
        prometheus:collect()
      ';
      }
 
      location /check {
      default_type text/plain;
      content_by_lua 'ngx.say("hello lua")';
     }

      location /ngx_status {
        allow 10.0.0.0/8;
        allow 172.0.0.0/8;
        deny all;
        stub_status on;
    }
    }
    ###############################
    include /etc/nginx/conf.d/*.conf;
}
